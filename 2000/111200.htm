<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>超星尔雅学习通大数据算法网课章节测试答案</title>
<meta name="keywords" content="超星，尔雅，学习通，大数据算法，网课，章节测试，答案">
<meta name="description" content="超星尔雅学习通大数据算法网课章节测试答案">
</head>

<body>

<p><font size="5" face="微软雅黑" color="#FF0000">超星尔雅学习通大数据算法(哈尔滨工业大学)网课章节测试答案免费分享<br>
</font><font color="#686868" size="4" face="微软雅黑"><br>
1.1大数据的定义与特点<br>
<br>
1、【单选题】以下关于大数据的特点,叙述错误的是()。<br>
A、速度慢<br>
B、多元、异构<br>
C、数据规模大<br>
D、基于高度分析的新价值<br>
我的答案：A<br>
<br>
2、【单选题】在《法华经》中,“那由他”描写的“大”的数量级是()。<br>
A、10^7<br>
B、10^14<br>
C、10^28<br>
D、10^56<br>
我的答案：C<br>
<br>
3、【多选题】以下选项中,大数据涉及的领域中包括()。<br>
A、社交网络<br>
B、医疗数据<br>
C、计算机艺术<br>
D、医疗数据<br>
我的答案：ABC(D)<br>
<br>
4、【多选题】大数据的应用包括()。<br>
A、预测<br>
B、推荐<br>
C、商业情报分析<br>
D、科学研究<br>
我的答案：ABCD<br>
<br>
5、【判断题】目前,关于大数据已有公认的确定定义。<br>
我的答案：X<br>
<br>
6、【判断题】大数据种类繁多,在编码方式、数据格式、应用特征等方面都存在差异。()<br>
我的答案：√<br>
<br>
1.2大数据算法（1）<br>
<br>
1、【单选题】大数据求解计算问题过程的第三步一般是()。<br>
A、判断可计算否<br>
B、判断能行可计算否<br>
C、算法设计与分析<br>
D、用计算机语言实现算法<br>
我的答案：C<br>
<br>
2、【多选题】在大数据求解计算问题中,判断是否为能行可计算的因素包括()。<br>
A、数据量<br>
B、资源约束<br>
C、速度约束<br>
D、时间约束<br>
我的答案：ABD<br>
<br>
3、【判断题】大数据求解计算问题过程的第一步是确定该问题是否可计算。<br>
我的答案：√<br>
<br>
4、【判断题】大数据计算模型与一般小规模计算模型一样,都使用的是图灵机模型。<br>
我的答案：√<br>
<br>
1.3大数据算法（2）<br>
<br>
1、【多选题】资源约束包括()。<br>
A、CPU<br>
B、网络带宽<br>
C、内存<br>
D、外存<br>
我的答案：ABCD<br>
<br>
2、【多选题】大数据算法可以不是()。<br>
A、云计算<br>
B、精确算法<br>
C、内存算法<br>
D、串行算法<br>
我的答案：BCD<br>
<br>
3、【判断题】大数据算法是在给定的时间约束下,以大数据为输入,在给定资源约束内可以生成满足给定约束结果的算法。<br>
我的答案：X<br>
<br>
4、【判断题】MapReduce是一种比较好实现大数据算法的编程架构,在生产中得到广泛应用。<br>
我的答案：√<br>
<br>
5、【判断题】大数据算法是仅在电子计算机上运行的算法。<br>
我的答案：X<br>
<br>
1.4大数据的特点与大数据算法<br>
<br>
1、【单选题】众包算法是用来解决()。<br>
A、访问全部数据时间过长<br>
B、数据难于放入内存计算<br>
C、单个计算机难以保存全部数据,计算需要整体数据<br>
D、计算机计算能力不足或知识不足,需要人来帮忙<br>
我的答案：D<br>
<br>
2、【单选题】大数据算法存在很多难题,对于访问全部数据时间过长的问题,采用的解决方案是()。<br>
A、将数据存储到磁盘上<br>
B、仅基于少量数据进行计算<br>
C、读取部分数据<br>
D、并行处理<br>
我的答案：C<br>
<br>
3、【多选题】大数据算法的()特点,使其与大数据算法密切相关的。<br>
A、数据量大<br>
B、基于高度分析的新价值<br>
C、速度快<br>
D、多样性、复杂性<br>
我的答案：AC<br>
<br>
4、【判断题】为解决单个计算机难以保存全部数据的问题,通常会采用并行处理的技术,此技术会涉及到时间亚线性算法。<br>
我的答案：X<br>
<br>
1.5大数据算法设计与分析<br>
<br>
1、【单选题】大数据算法涉及到外存的时候,通常要分析()。<br>
A、时间空间复杂性<br>
B、IO复杂性<br>
C、结果质量<br>
D、通讯复杂性<br>
我的答案：B<br>
<br>
2、【多选题】下列选项中,属于智能仿生算法的是()。<br>
A、遗传算法<br>
B、近似算法<br>
C、模拟退火算法<br>
D、数据流算法<br>
我的答案：AC<br>
<br>
3、【判断题】在线算法/数据流算法是面向大数据速度快的特点提出的。()<br>
我的答案：√<br>
<br>
4、【判断题】对于数据流算法或在线算法,经常要分析结果的近似比。()<br>
我的答案：X<br>
<br>
5、【判断题】随机算法是利用随机化的方法来进行大数据处理,是大数据算法设计技术之一。()<br>
我的答案：√<br>
<br>
2.1亚线性算法的定义<br>
<br>
1、【单选题】计算在一个给定社交网络中平均每人的朋友个数,在不访问所有顶点的情况下,进行精确计算最少需要访问()个顶点。<br>
A、n&sup2;<br>
B、n+1<br>
C、2n<br>
D、n-1<br>
我的答案：D<br>
<br>
2、【多选题】亚线性是指()等的消耗是输入规模o。()<br>
A、时间<br>
B、空间<br>
C、IO<br>
D、通讯<br>
我的答案：ABCD<br>
<br>
3、【判断题】性质检测算法属于亚线性空间算法的一类。()<br>
我的答案：X<br>
<br>
2.2水库抽样——空间亚线性算法<br>
<br>
1、【判断题】在经典的水库抽样中,要求空间复杂性为O(k),是指与抽样大小有关,而与整个数据的数据量无关。<br>
我的答案：√<br>
<br>
2、【判断题】水库抽样算法的采样是均匀的。<br>
我的答案：√<br>
<br>
2.3平面图直径——时间亚线性计算算法<br>
<br>
1、【单选题】以下()不是衡量分析近似解代价与优化解代价差距的方法。<br>
A、Ratio Bound<br>
B、相对误差<br>
C、绝对误差<br>
D、(1-&#8455;)-近似<br>
我的答案：C<br>
<br>
2、【单选题】利用平面图的直径近似算法得到的解,在最坏情况下,也不会小于最优解的()。<br>
A、二分之一<br>
B、三分之一<br>
C、四分之一<br>
D、十分之一<br>
我的答案：A<br>
<br>
3、【单选题】采用平面图的直径近似算法的动机是无法在要求的时间内得到()。<br>
A、相似解<br>
B、完整解<br>
C、精确解<br>
D、近似解<br>
我的答案：C<br>
<br>
4、【判断题】在平面图的直径近似算法中,要求点之间的距离满足三角不等式是指在i、j、k三个点中,i到j的距离加上j到k的距离小于i到k的距离。<br>
我的答案：X<br>
<br>
5、【判断题】近似算法能给出一个优化问题的优化解。<br>
我的答案：X<br>
<br>
6、【判断题】Ratio Bound越大,则近似解越坏。()<br>
我的答案：√<br>
<br>
2.4全0数组判定——时间亚线性判定算法<br>
<br>
1、【多选题】在判定问题的近似中,对于近似解需要区分的是()。<br>
A、是<br>
B、否<br>
C、差不离<br>
D、差得很远<br>
我的答案：AD<br>
<br>
2、【判断题】全0数组判定的近似算法的证据引理是:如果一次测试以大于等于p的概率获得一个证据,那么s=2/p轮测试得到证据的概率大于等于1/2。<br>
我的答案：X<br>
<br>
3、【判断题】判定问题的近似解是指:输入满足某种性质或近似满足某种性质。<br>
我的答案：X<br>
<br>
3.1数据流中频繁元素<br>
<br>
1、【判断题】Zipf原则是指典型的频率分布是高度偏斜的,存在很多频繁元素。()<br>
我的答案：X<br>
<br>
2、【判断题】在数据流模型中,从数据流中可以计算简单的函数,如最大值、最小值、求和等,且处理这些函数时通常使用单个寄存器s。()<br>
我的答案：√<br>
<br>
3、【判断题】数据流模型中,数据流是指来自某个域中的元素序列。()<br>
我的答案：√<br>
<br>
4、【判断题】在数据流模型中,内存远远大于数据的规模。()<br>
我的答案：X<br>
<br>
3.2频繁元素计算算法<br>
<br>
1、【单选题】频繁元素计算算法又称为()算法。<br>
A、MM<br>
B、MG<br>
C、GM<br>
D、MP<br>
我的答案：B<br>
<br>
2、【单选题】频繁元素计算算法有效的原因是源于()。<br>
A、取近似解<br>
B、证据引理<br>
C、错误界限和k成反比<br>
D、Zipf原则<br>
我的答案：D<br>
<br>
3、【判断题】在频繁元素计算算法中,计数器x减少的次数依赖于有几个减少计数器的步骤。()<br>
我的答案：√<br>
<br>
4、【判断题】在频繁元素计算算法中,当数据流中元素的总个数远大于估计值与真实值相差的最多值时,可以得到频繁项一个好的估计。<br>
我的答案：√<br>
<br>
3.3最小生成树<br>
<br>
1、【单选题】时间亚线性算法的思想是:利用特定子图联通分量的数量估计最小生成树的()。<br>
A、近似值<br>
B、精确值<br>
C、权重<br>
D、界限<br>
我的答案：C<br>
<br>
2、【单选题】求最小生成树是一个贪心法,可以用()算法来解决。<br>
A、Prime<br>
B、并行<br>
C、MG<br>
D、内存<br>
我的答案：A<br>
<br>
3、【判断题】对联通分量个数的估计可以利用随机化方法。<br>
我的答案：√<br>
<br>
3.4序列有序的判定<br>
<br>
1、【单选题】对于输入n个数的数组(x1,x2,x3,……,xn),输出:这个数组是否有序。&#8455;远离意味着必须删除大于()个元素才能保证剩下的元素有序。<br>
A、&#8455;-n<br>
B、&#8455;n<br>
C、&#8455;/n<br>
D、n/&#8455;<br>
我的答案：B<br>
<br>
2、【判断题】如果一次测试以大于等于p的概率获得一个证据,那么s=2/p轮测试得到证据的概率大于等于3/4。<br>
我的答案：X<br>
<br>
3、【判断题】关于证明如果输入&#8455;远离有序,则存在大于&#8455;n个“坏索引”的问题,可以采用证明其逆否命题的方法。<br>
我的答案：√<br>
<br>
4.1外存存储结构与外存算法<br>
<br>
1、【单选题】下列选项中叙述正确的是()。<br>
A、磁盘的访问可以随机读、随机取<br>
B、磁盘系统传输大规模连续的数据块的范围是18-32k<br>
C、磁盘访问比主存访问的速度快<br>
D、大多数程序在RAM模型上运行<br>
我的答案：D<br>
<br>
2、【判断题】对于大数据而言,标准计算理论模型失效的原因之一是内存是有限的,无法存储所有的内存。()<br>
我的答案：√<br>
<br>
3、【判断题】当内存不够或者算法设计不好时,如果数据量达到一定规模以上,运行时间会急剧增加。<br>
我的答案：√<br>
<br>
4、【判断题】现代计算机有复杂的存储层次,存储单元的访问是以块为单位的数据移动。()<br>
我的答案：√<br>
<br>
4.2.1外存算法示例：外存排序算法（1）<br>
<br>
1、【单选题】外存归并排序,以()为单位进行调度。<br>
A、比特<br>
B、兆<br>
C、块<br>
D、层<br>
我的答案：C<br>
<br>
2、【判断题】排序分为内部排序和外部排序,外部排序是因排序的数据很大,一次不能容纳全部的排序内容,在排序过程中需要访问外存。()<br>
我的答案：√<br>
<br>
4.2.2外存算法示例：外存排序算法（2）<br>
<br>
1、【单选题】在外排序的快速排序中,分割元素的选择非常重要。<br>
我的答案：√<br>
<br>
4.3外存数据结构示例：外存查找树<br>
<br>
1、【单选题】在内存中的二分搜索树中,通常使用()来维护树的平衡。()<br>
A、置换<br>
B、分裂<br>
C、旋转<br>
D、合并<br>
我的答案：C<br>
<br>
2、【判断题】二叉搜索树是在n个元素之间搜索的标准方法,一般把元素保存在根处。()<br>
我的答案：X<br>
<br>
3、【判断题】为更快地保存外部搜索树,可采取按BFS的顺序将其分割。()<br>
我的答案：√<br>
<br>
5.1B树（1）<br>
<br>
1、【单选题】如果T是一个(a,b)-树(a≧2且b≧2a-1),其根结点的度在()之间。<br>
A、2到a<br>
B、2到b<br>
C、a到b<br>
D、2到4<br>
我的答案：B<br>
<br>
2、【判断题】在(a,b)-树中,a和b表示的是每个节点当中键值的上限和下限。()<br>
我的答案：X<br>
<br>
3、【判断题】B-树中右边的指针指向的是键值小于最右键值的子数。()<br>
我的答案：X<br>
<br>
5.2B树（2）<br>
<br>
1、【单选题】元素都在叶子中的B-树有时被称为()。<br>
A、B+树<br>
B、B-+树<br>
C、B+-树<br>
D、B+-数<br>
我的答案：C<br>
<br>
2、【判断题】关于(a,b)—树的删除操作,删除操作出现问题的情形是:从叶子v删除元素后,v的儿子小于a-1个。()<br>
我的答案：√<br>
<br>
3、【判断题】关于(a,b)-树的插入,插入涉及到的结点最多到树高+1。()<br>
我的答案：√<br>
<br>
5.3KD树<br>
<br>
1、【单选题】KD树在()层使用水平线。<br>
A、偶数层<br>
B、奇数层<br>
C、最底层<br>
D、最高层<br>
我的答案：A<br>
<br>
2、【单选题】KdB-树的插入可以使用()的方法。<br>
A、近似<br>
B、置换<br>
C、对数<br>
D、重构<br>
我的答案：C<br>
<br>
3、【单选题】构建KDB-树时,完成网格建立之后,计算每个网格中点的个数,并且存储在()中。<br>
A、外存<br>
B、数据库<br>
C、寄存器<br>
D、内存<br>
我的答案：D<br>
<br>
4、【判断题】基于位置的查找实际上是一种三维空间的查找。()<br>
我的答案：X<br>
<br>
5、【判断题】KD树可以看成是两个二叉树的交叠。()<br>
我的答案：√<br>
<br>
6.1表排序及其应用<br>
<br>
1、【单选题】为数T的每个结点标上子树大小的I/O复杂度为()。<br>
A、IO (sort(N))<br>
B、O (sort(N))<br>
C、IO(scan(N))<br>
D、O(scan(N))<br>
我的答案：B<br>
<br>
2、【单选题】前序计数的I/O复杂度为()。<br>
A、IO (sort(N))<br>
B、O (sort(N))<br>
C、IO(scan(N))<br>
D、O(scan(N))<br>
我的答案：B<br>
<br>
3、【单选题】对给定顶点邻接链表T,其一个欧拉回路可以以()IO复杂性求得。<br>
A、O (sort(N))<br>
B、O(scan(N))<br>
C、O(scan(N))IO<br>
D、IO(scan(N))<br>
我的答案：C<br>
<br>
4、【判断题】外存算法最坏情况的I/O数位Ω(N)。()<br>
我的答案：X<br>
<br>
5、【判断题】图中的独立集是指图当中点的集合,其任意两点之间不存在边。()<br>
我的答案：√<br>
<br>
6.2时间前向处理方法<br>
<br>
1、【单选题】查找规模为N的表L中,每个独立集(MIS)的大小至少为()。<br>
A、n+1<br>
B、2n<br>
C、n/2<br>
D、n/3<br>
我的答案：D<br>
<br>
2、【单选题】时间前向的处理方法是按照()来访问边。<br>
A、欧拉回路<br>
B、表排序<br>
C、拓扑序<br>
D、结点序<br>
我的答案：C<br>
<br>
3、【判断题】求最大独立集的基本思想是使用贪心法。()<br>
我的答案：√<br>
<br>
6.3缩图法<br>
<br>
1、【单选题】图算法包含三种计数,其中将图问题表示为有向无环图的估值问题的是()。<br>
A、自举<br>
B、缩图法<br>
C、时间前向处理<br>
D、连通分量<br>
我的答案：C<br>
<br>
2、【单选题】半外存算法是假设()。<br>
A、边放在内存中,顶点在外面<br>
B、顶点放在内存中,边在外面<br>
C、顶点和边都放在内存当中<br>
D、顶点和边都不在内存当中<br>
我的答案：B<br>
<br>
3、【判断题】图的连通性算法可扩增为求图G最小生成树(MST)的算法。()<br>
我的答案：√<br>
<br>
4、【判断题】在求最小生成树时,压缩后图中某条边的权值等于该边代表的所有边的权值最大值。()<br>
我的答案：X<br>
<br>
7.1MapReduce概述<br>
<br>
1、【单选题】MapReduce是由()开发的分布式编程模型。<br>
A、Microsoft<br>
B、Google<br>
C、Tencent<br>
D、Alibaba Group<br>
我的答案：B<br>
<br>
2、【单选题】在实现MapReduce程序时,需要注意的事项不包括()。<br>
A、避免创建对象<br>
B、避免缓冲<br>
C、避免通信<br>
D、避免Mapper和Reducer间的全局变量传递<br>
我的答案：C<br>
<br>
3、【多选题】MapReduce的执行框架处理的内容包括()。<br>
A、调度<br>
B、数据分布<br>
C、将中间数据进行聚集、排序或洗牌<br>
D、进行错误处理<br>
我的答案：ABCD<br>
<br>
4、【多选题】理想的可扩展性有()。<br>
A、数据加倍,运行时间减半<br>
B、数据加倍,运行时间加倍<br>
C、资源加倍,运行时间减半<br>
D、资源加倍,运行时间加倍<br>
我的答案：BC<br>
<br>
5、【判断题】Map()和Reduce()两个函数不能够并行运行。()<br>
我的答案：X<br>
<br>
7.2字数统计<br>
<br>
1、【单选题】在版本1的字数统计中，在Map里使用了一个数组H，其作用是为每一个出现的单词作（）。<br>
A、序列<br>
B、基数<br>
C、集合<br>
我的答案：B<br>
<br>
7.3平均数计算<br>
<br>
1、【判断题】大部分时候reducer不能用作combiner。()<br>
我的答案：√<br>
<br>
2、【判断题】combiner的运行次数可能有多次。<br>
我的答案：√<br>
<br>
7.4单词共现矩阵的计算<br>
<br>
1、【多选题】关于单词共现矩阵的计算,说法正确的是()。<br>
A、计算文本集合中词的共现矩阵<br>
B、词的个数如果为N,输出为M*N的矩阵<br>
C、是一种测量语义距离的方法<br>
D、语义距离可用于许多语言处理任务<br>
我的答案：ACD<br>
<br>
2、【多选题】用单词共现矩阵解决大规模计数问题的基本方法是()。<br>
A、Mapper生成部分计数<br>
B、Reducer生成部分计数<br>
C、Reducer聚合部分计数<br>
D、Mapper聚合部分计数<br>
我的答案：AC<br>
<br>
3、【多选题】“条纹法”的优点有()。<br>
A、易于实现<br>
B、对key-value对的排序和洗牌少得多<br>
C、潜在对象更大<br>
D、能更好地利用combiner<br>
我的答案：BD<br>
<br>
4、【判断题】在“词对法”中,每个mapper处理一个句子。()<br>
我的答案：√<br>
<br>
5、【判断题】“词对法”的缺点是不易实现,排序和洗牌代价高。()<br>
我的答案：X<br>
<br>
6、【判断题】f(B|A)词对法必须确定所有a被传递到同一个combiner。()<br>
我的答案：X<br>
<br>
8.1连接（join）算法<br>
<br>
1、【单选题】在repartition join的改进中,说法错误的是()。<br>
A、Map函数的输出键作为连接键<br>
B、Map函数的输出键变化为连接键和表名的组合。<br>
C、Partition函数中Hashcode仅从组合键的连接键计算<br>
D、Grouping函数仅根据连接键分组纪录<br>
我的答案：A<br>
<br>
2、【多选题】用MR进行多重集相似连接算法的常见计算包括()。<br>
A、三角函数<br>
B、单元函数<br>
C、合取函数<br>
D、析取函数<br>
我的答案：BCD<br>
<br>
3、【判断题】自然连接是从两个关系的笛卡尔积中选取给定属性间满足一定条件的元组。()<br>
我的答案：X<br>
<br>
4、【判断题】等值连接不必在结果中去掉重复的属性。()<br>
我的答案：√<br>
<br>
8.2图算法<br>
<br>
1、【判断题】在迭代MapReduce中,reduce的输出必须和map的输入兼容。()<br>
我的答案：√<br>
<br>
2、【判断题】“推荐好友”是图算法在社交网络中的一种实际用例。()<br>
我的答案：√<br>
<br>
8.3基于路径的算法<br>
<br>
1、【单选题】找到一个稠密图的最小生成树的算法易于并行化的原因是每个子图的()可以被并行计算。<br>
A、边<br>
B、顶点<br>
C、结点<br>
D、最小生成树<br>
我的答案：D<br>
<br>
2、【单选题】基于路径的算法的例子不包括()。<br>
A、单源最短路径<br>
B、最小生成树<br>
C、分布式不动点运算<br>
D、拓扑排序<br>
我的答案：C<br>
<br>
3、【多选题】在基于路径的算法中,边的标记包括()。<br>
A、代价<br>
B、距离<br>
C、相似性<br>
D、属性<br>
我的答案：ABC<br>
<br>
4、【判断题】Dijkstra算法需要并行化。()<br>
我的答案：X<br>
<br>
9.1基于迭代处理平台的并行算法<br>
<br>
1、【多选题】缓存迭代的方法是()。<br>
A、在Mapper前加入输入缓存<br>
B、在Mapper后加入输出缓存<br>
C、在Reducer前加入输入缓存<br>
D、在Reducer后加入输出缓存<br>
我的答案：ACD<br>
<br>
2、【判断题】MapReduce是一种非递归描述性语言的通用运行平台。()<br>
我的答案：√<br>
<br>
3、【判断题】Reducer输入缓存的条件是使用静态划分方法,即意味着没有新的结点。()<br>
我的答案：√<br>
<br>
9.2基于图处理平台的并行算法<br>
<br>
1、【单选题】关于并行节点计算,下列选项中关于节点叙述不准确的是()。<br>
A、每一个节点接受上一个superstep发出的消息<br>
B、执行相同的用户定义函数<br>
C、所有节点根据用户定义函数修改它的值<br>
D、没有额外工作要做时继续迭代<br>
我的答案：D<br>
<br>
2、【单选题】Pregel系统中Master的作用不包括()。<br>
A、维护worker<br>
B、恢复workers产生的错误<br>
C、提供Web-UI监督工作进程工具<br>
D、与worker交流<br>
我的答案：D<br>
<br>
3、【多选题】并行结点计算的终止条件是()。<br>
A、消息传送到其他点后<br>
B、所有顶点同时变为非活跃状态<br>
C、迭代结束<br>
D、没有信息传递<br>
我的答案：BD<br>
<br>
4、【多选题】用Pregel计算子图同构问题,其三个步骤是()。<br>
A、查询分解<br>
B、搜索<br>
C、迭代<br>
D、Join<br>
我的答案：ABD<br>
<br>
5、【判断题】Pregel的编程形式,在执行计算的机器上每一阶段都利用整个图的全部状态。()<br>
我的答案：X<br>
<br>
10.1众包的定义<br>
<br>
1、【单选题】众包通过一系列的机制和方法来指导和协调()的行为,从而达到目的。<br>
A、个人<br>
B、计算机<br>
C、群体<br>
D、软件<br>
我的答案：C<br>
<br>
2、【判断题】外包与众包的区别在于众包的参与者数量大且不固定的。()<br>
我的答案：√<br>
<br>
3、【判断题】Wikipedia是众包案例的一种最成功的应用之一。()<br>
我的答案：√<br>
<br>
4、【判断题】众包极大程度地使用了人本计算,因此它基本上等同于人本计算。()<br>
我的答案：X<br>
<br>
10.2众包的实例<br>
<br>
1、【单选题】人脸识别是利用众包改进图像()的例子。<br>
A、分类<br>
B、区分<br>
C、确认<br>
D、搜索<br>
我的答案：D<br>
<br>
2、【多选题】下列属于众包应用的例子有()。<br>
A、验证码<br>
B、机器翻译<br>
C、图像搜索<br>
D、数据库查询<br>
我的答案：ABCD<br>
<br>
3、【判断题】众包技术应用于广告中的情形之一是区分关键词与广告的相关程度。()<br>
我的答案：√<br>
<br>
4、【判断题】目前众包技术已经可以判断两幅画在艺术风格上是否一致。()<br>
我的答案：X<br>
<br>
10.3众包的要素<br>
<br>
1、【单选题】众包中质量控制/数据质量要考虑的问题不包括()。<br>
A、可靠性<br>
B、垃圾结果检测<br>
C、标签共识<br>
D、界面和交互设计<br>
我的答案：D<br>
<br>
2、【多选题】众包中的参与者包括()。<br>
A、请求者<br>
B、平台<br>
C、工人<br>
D、评估者<br>
我的答案：ABC<br>
<br>
3、【多选题】在人机交互中从用户获取输入的方式有()。<br>
A、调查<br>
B、快速原型<br>
C、可用性测试<br>
D、认知走查<br>
我的答案：ABCD<br>
<br>
4、【判断题】众包中工人的回报是多样的。()<br>
我的答案：√<br>
<br>
5、【判断题】难以核实主观任务是资格测试的缺点之一。()<br>
我的答案：√<br>
<br>
6、【判断题】任务分配的拉方法是指系统采取完全的控制将制定的任务分配给工人。()<br>
我的答案：X<br>
<br>
10.4众包算法例析<br>
<br>
1、【单选题】采用把大连通分量划分成高度连接的小连通分量基本思路的方法是()<br>
A、CrowdDB<br>
B、混合人机工作流程<br>
C、双层法<br>
D、分批策略<br>
我的答案：C<br>
<br>
2、【多选题】用机器完成众包的优势有()。<br>
A、省钱<br>
B、省时<br>
C、数量大<br>
D、质量高<br>
我的答案：AB<br>
<br>
3、【判断题】目前众包技术完全由计算机来完成。()<br>
我的答案：X<br>
<br>
4、【判断题】基于簇的HIT生成问题的优化目标是生成最小数目基于簇的HIT。()<br>
我的答案：√</font></p>

</body>

</html>
